# http server parameters
http {
  server {
    host: "0.0.0.0"
    host: ${?NH_HTTP_HOST}

    port: 8081
    port: ${?NH_HTTP_PORT}

    idle-timeout: 60.seconds
    idle-timeout: ${?NH_HTTP_IDLE_TIMEOUT}

    response-header-timeout: 30.seconds
    response-header-timeout: ${?NH_HTTP_RESPONSE_HEADER_TIMEOUT}

    use-gzip: false
    use-gzip: ${?NH_HTTP_USE_GZIP}

    use-keep-alive: false
    use-keep-alive: ${?NH_HTTP_SOCKET_KEEP_ALIVE}

    use-netty-backend: true
    use-netty-backend: ${?NH_HTTP_USE_NETTY_BACKEND}
  }

  auth {
    type: dummy // change to 'keycloak' for keycloak user auth, see below
    type: ${?NH_AUTH_TYPE}

    // Keycloak JWT auth
    // type: keycloak
    uri: "https://localhost:8443"
    uri: ${?NH_AUTH_HTTP_CLIENT_URI}

    client-id: null
    client-id: ${?NH_AUTH_CLIENT_ID}

    realm: "myrealm"
    realm: ${?NH_AUTH_REALM}

    connection-options {
      jwks-path: "auth/realms/"${http.auth.realm}"/protocol/openid-connect/certs"
      jwks-path: ${?NH_AUTH_JSON_WEB_KEY_PATH}

      token-path: null
      token-path: ${?NH_AUTH_TOKEN_PATH}

      tls-without-validation: true
      tls-without-validation: ${?NH_AUTH_TLS_WITHOUT_VALIDATION}
    }

    jwt-options {
      check-signature: true
      check-expiration: true
      jwk-cache-ttl: 10.minutes
    }

    // End of Keycloak JWT AUTH

    // Dummy data auth
    // type = dummy
    user: nh-user-dummy
    roles: [nh-admin]
    // End of Dummy data auth
  }
}

user {
  db {

    database {
      connection {
        jdbc-driver-name: "org.postgresql.Driver"

        jdbc-url: "jdbc:postgresql://localhost:5432/network_highload"
        jdbc-url: ${?NH_POSTGRES_JOB_JDBC_URL}

        user: "postgres"
        user: ${?NH_POSTGRES_DB_USERNAME}

        password: "postgres"
        password: ${?NH_POSTGRES_DB_PASSWORD}
      }

      migrations {
        # path to job tables migration files
        locations: ["classpath:/migrations/postgres"],
        mixed: allow
      }
    }

    read {
      connection-max-pool-size: 8
      connection-max-pool-size: ${?NH_DB_READ_CONNECTIONS_MAX}

      connection-idle-pool-size: 8
      connection-idle-pool-size: ${?NH_DB_READ_CONNECTIONS_IDLE}

      connection-timeout: 30 seconds
      connection-timeout: ${?NH_DB_READ_CONNECTION_TIMEOUT}

      connection-idle-timeout: 5 minute
      connection-idle-timeout: ${?NH_DB_READ_CONNECTION_IDLE_TIMEOUT}

      connection-max-lifetime: 10 minutes
      connection-max-lifetime: ${?NH_DB_READ_CONNECTION_MAX_LIFETIME}

      thread-pool-size: 8
      thread-pool-size: ${?NH_DB_READ_THREADS}

      leak-detection-threshold: 10 seconds
      leak-detection-threshold: ${?NH_DB_READ_LEAK_DETECTION_THRESHOLD}
    }

    write {
      connection-max-pool-size: 20
      connection-max-pool-size: ${?NH_DB_WRITE_CONNECTIONS_MAX}

      connection-idle-pool-size: 10
      connection-idle-pool-size: ${?NH_DB_WRITE_CONNECTIONS_IDLE}

      connection-timeout: 30 seconds
      connection-timeout: ${?NH_DB_WRITE_CONNECTION_TIMEOUT}

      connection-idle-timeout: 5 minute
      connection-idle-timeout: ${?NH_DB_WRITE_CONNECTION_IDLE_TIMEOUT}

      connection-max-lifetime: 10 minutes
      connection-max-lifetime: ${?NH_DB_WRITE_CONNECTION_MAX_LIFETIME}

      thread-pool-size: 8
      thread-pool-size: ${?NH_DB_WRITE_THREADS}

      leak-detection-threshold: 10 seconds
      leak-detection-threshold: ${?NH_DB_WRITE_LEAK_DETECTION_THRESHOLD}
    }

    metrics {
      enabled: true
      enabled: ${?NH_DB_ENABLE_HIKARI_METRICS}
    }

    # set network timeout between HikariCP and database
    # socketTimeout should be set to at least 2-3x longer than your longest expected query.
    socket-timeout: 5 minutes
    socket-timeout: ${?NH_HIKARI_SOCKET_TIMEOUT}

    # controls how frequently HikariCP will attempt to keep a connection alive,
    # in order to prevent it from being timed out by the database or network infrastructure.
    keep-alive-timeout: 2 minutes
    keep-alive-timeout: ${?NH_HIKARI_KEEP_ALIVE_TIMEOUT}

    transaction-retry {
      retry-count: 3
      retry-count: ${?NH_TRANSACTION_RETRY_COUNT}

      base-interval: 50.millis
      base-interval: ${?NH_TRANSACTION_BASE_INTERVAL}
    }
  }
}
